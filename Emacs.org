#+title: Emacs From Scratch Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mrequirekdirp yes
* Package System Setup
#+begin_src emacs-lisp
    ;; Initialize package sources
  ;; this me
  ;; hello there
  ;; hi
  (require 'package)

    (setq package-archives '(
			     ;; ("melpa" . "https://melpa.org/packages/")
			     ("org" . "https://orgmode.org/elpa/")
			     ;; ("elpa" . "https://elpa.gnu.org/packages/")


			     ("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
			     ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
			     ;; ("marmalade" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/marmalade/")                      
			     ("melpa-stable" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa-stable/")
			     ))

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

      ;; Initialize use-package on non-Linux platforms
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t)

#+end_src
* Basic UI Configuration
#+begin_src emacs-lisp
   (setq inhibit-startup-message t)

   (scroll-bar-mode -1)        ; Disable visible scrollbar
   (tool-bar-mode -1)          ; Disable the toolbar
   (tooltip-mode -1)           ; Disable tooltips
   (set-fringe-mode 10)        ; Give some breathing room

  ; (menu-bar-mode -1)            ; Disable the menu bar

   ;; Set up the visible bell

  



   (setq visible-bell t)

   (column-number-mode)
   (global-display-line-numbers-mode t)

   ;; Disable line numbers for some modes
   (dolist (mode '(org-mode-hook
		   term-mode-hook
		   shell-mode-hook
		   eshell-mode-hook
		   ))
     (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

* UI Configuration

** Color Theme
#+begin_src emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-dracula t))
#+end_src

** Modeline
#+begin_src emacs-lisp 
(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src

** Which Key
#+begin_src emacs-lisp 
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+end_src

** Ivy and Counsel
#+begin_src emacs-lisp 
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :config
  (counsel-mode 1))

#+end_src

** Helpful Help Commands
#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

** Text Scaling
#+begin_src emacs-lisp
(use-package hydra)

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))
#+end_src

** Window Management

*** Base action
#+begin_src emacs-lisp
(setq display-buffer-base-action
  '((display-buffer-reuse-window
     display-buffer-reuse-mode-window
     display-buffer-same-window
     display-buffer-in-previous-window)
    . ((mode . (org-mode helpful-mode help-mode)))
    )
  )
#+end_src

*** Winner mode
#+begin_src emacs-lisp
;;cursor
(use-package winum
  :config
  (winum-mode))
#+end_src
*** Winum
#+begin_src emacs-lisp
(use-package winner-mode
  :ensure nil
  :bind (
         ("C-c <left>" . winner-undo)
         ("C-c <right>" . winner-redo))
  :config
  (winner-mode))
#+end_src
*** buffer-move
#+begin_src emacs-lisp
(use-package buffer-move
  :bind
  (("C-c w" . buf-move))
  )
#+end_src

** Yasnippet

#+begin_src emacs-lisp


  (require 'yasnippet)
  ;; use Ctrl-c k as the only trigger
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key yas-minor-mode-map (kbd "C-c k") 'yas-expand)

  (yas-global-mode t)


#+end_src
** Auto-Complete
#+begin_src emacs-lisp
  ;; init-auto-complete.el

  (use-package auto-complete)
  (require 'auto-complete-config)
  (global-auto-complete-mode t)

  ;; add customized dict into the dict of auto-complete
  (add-to-list 'ac-dictionary-directories
	       (expand-file-name "lisp/custom-dicts" user-emacs-directory))

  (ac-config-default)



  ;; After pressing TAB: 1. indent 2.try complete ?
  (setq tab-always-indent 'complete)

  ;; stop triggering completion automatically
  (setq-default ac-expand-on-auto-complete nil)
  (setq-default ac-auto-start nil)

  ;; use TAB as shortcut of mannually triggering completion
  (ac-set-trigger-key "TAB")

  ;; use after-load to ensure ac-source-yasnippet is loaded
  (setq-default ac-sources
	       '(ac-source-dictionary
		 ac-source-words-in-buffer
		 ac-source-words-in-same-mode-buffers
		 ac-source-words-in-all-buffer
		 ac-source-functions
		 ac-source-yasnippet))
  
#+end_src
*** Auto-Complete source
#+begin_src emacs-lisp
  (require 'auto-complete-clang)
(setq ac-clang-flags
      (mapcar (lambda (item) (concat "-I" item))
              (split-string
               "
 /usr/local/include
 /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/v1
 /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/12.0.5/include
 /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include
 /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include
 /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
"
               )))
#+end_src
* Org Mode
Functionalities:
+ Document editor
+ Project Planner
+ Task/Time Tracker
+ Blogging Engine
+ Literate Coding 
** Basic Config
#+begin_src emacs-lisp

      (defun efs/org-mode-setup ()
        (org-indent-mode 1)
        ;; (variable-pitch-mode 1)
        (visual-line-mode 1)
        )

        (use-package org
          :bind
          (("C-c c" . org-capture)
           ("C-c a" . org-agenda)
           ("C-c M-s" . org-store-link))

          :hook (org-mode . efs/org-mode-setup)
          :config
          (setq org-ellipsis " ▾")
          ;; (efs/org-font-setup)

          (setq org-agenda-start-with-log-mode t)
          (setq org-log-done 'time)
          (setq org-log-into-drawer t)

          (setq org-agenda-files
                '("~/Notes/RoamNotes/"
                  "~/Notes/OrgNotes/Birthday.org"
                  "~/Notes/OrgNotes/Habits.org"
                  "~/Notes/OrgNotes/Tasks.org"
                  "~/Notes/OrgNotes/Homework.org"
                  "~/Notes/OrgNotes/Journal.org"

                  )
                )

          )

        ;;org-habit: extra information about the streak of habit in the agenda view
        (require 'org-habit)
        (add-to-list 'org-modules 'org-habit)
        (setq org-habit-graph-column 60)

        ;;set todo keywords for different workflows
        (setq org-todo-keywords
            '((sequence "TODO(t)" "WEEK(w)" "NEXT(n)" "|" "DONE(d!) ABORT(a)")
              (sequence "BACKLOG(b)" "PLAN(p)" "READY(Ar)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)"))
              )

                                                ;refile: archive DONE todos and so on
         (setq org-refile-targets
            '(("Archive.org" :maxlevel . 1)
              ("Tasks.org" :maxlevel . 1)))

        ;; Save Org buffers after refiling!
        (advice-add 'org-refile :after 'org-save-all-org-buffers)

        ;;tags existing that would be handy before using it.
        (setq org-tag-alist
            '((:startgroup)
               ; Put mutually exclusive tags here
               (:endgroup)
               ("@errand" . ?E)
               ("@home" . ?H)
               ("@work" . ?W)
               ("agenda" . ?a)
               ("publish" . ?P)
               ("planning" . ?p)
               ("batch" . ?b)
               ("note" . ?n)
               ("idea" . ?i)
               ("machine" . ?m)
               ("principle" . ?r) 
               )
            )

                                                ;custom agenda views
         ;; Configure custom agenda views
          (setq org-agenda-custom-commands
           '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
               (todo "WEEK"
                ((org-agenda-overriding-header "Week Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+work-email")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ;;homeworks
            ("h" "Homeworks"
             tags-todo "+homework")

            ;; view checking workflow status at once
            ;; commented because I disabled the workflow statuses

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files))))
             )
            )
           )

        (defun org-review()
          "generate sparse tree of current file(with org-occur) for today, yesterday, 7 days ago and 30 days ago"
          (interactive)
          (progn
            (setq year1 (shell-command-to-string "date +%Y"))
            (setq month1 (shell-command-to-string "date +%m"))
            (setq day1 (shell-command-to-string "date +%d"))

            (setq year2 (shell-command-to-string "date -v-1d +%Y"))
            (setq month2 (shell-command-to-string "date -v-1d +%m"))
            (setq day2 (shell-command-to-string "date -v-1d +%d"))

            (setq year3 (shell-command-to-string "date -v-7d +%Y"))
            (setq month3 (shell-command-to-string "date -v-7d +%m"))
            (setq day3 (shell-command-to-string "date -v-7d +%d"))

            (setq year4 (shell-command-to-string "date -v-30d +%Y"))
            (setq month4 (shell-command-to-string "date -v-30d +%m"))
            (setq day4 (shell-command-to-string "date -v-30d +%d"))
            )

          ;;compose the regexp
          (setq slash "\\")
          (substring slash 0 0)
          (setq reg (string-replace "\n" "" (concat "\\" "("
                                                    year1 "-" month1 "-" day1 "\\|"
                                                    year2 "-" month2 "-" day2 "\\|"
                                                    year3 "-" month3 "-" day3 "\\|"
                                                    year4 "-" month4 "-" day4 
                                                    "\\"  ")"
                                                     )))
          ;;occur
          (org-occur reg)
          )

        (setq org-capture-templates
            `(("t" "Tasks / Projects")
              ("tt" "Task" entry (file+olp "~/Notes/OrgNotes/Tasks.org" "Inbox")
               "* TODO %?\n  %U\n  %a\n  %i" :emptnfy-lines 1)

              ("j" "Journal Entries")
              ("jj" "Journal" entry
               (file+olp+datetree "~/Notes/OrgNotes/Journal.org")
               "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
               ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
               :clock-in :clock-resume
               :empty-lines 1)
              ("jm" "Meeting" entry
               (file+olp+datetree "~/Notes/OrgNotes/Journal.org")
               "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
               :clock-in :clock-resume
               :empty-lines 1)
              ;; ("jr" "Reading" entry
               ;; (file+olp "~/Notes/OrgNotes/Read.org" "b
        ;; ooks)

      ;;	 "")

              ;; ("w" "Workflows")
              ;; ("we" "Checking Email" entry (file+olp+datetree "~/Notes/OrgNotes/Journal.org")
              ;;  "* Checking Email :email:\n\n%?" :clock-in :clock-resume :
      ;;	 empty-lines 1)

              ("m" "Metrics Capture")
              ("mw" "Weight" table-line (file+headline "~/Notes/OrgNotes/Metrics.org" "Weight")
               "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)
              ("me" "Wearing" table-line (file+olp "~/Notes/OrgNotes/Metrics.org" "Wearing" "Log") 
               "| %U | %^{Upper} | %^{Lower} | %^{Attachments} | %^{Notes} |" :kill-buffer t)
              ("l" "Study log")
              ("lr" "Review log" entry
               (file+olp+datetree "~/Notes/OrgNotes/Review.org")
               "* %U %^{content to review} :review: \n %? \n %a"
               :empty-lines 1)
              ("lq" "Question log" entry
               (file+olp+datetree "~/Notes/OrgNotes/Questions.org")
               "* %U %^{Doubt} :question: \n %? \n %a"
               :empty-lines 1)
              ("lh" "Homework" entry
               (file+olp+datetree "~/Notes/OrgNotes/Homework.org")
               "* TODO %U %^{Homework Title} :homework:%^{Module}: \n %? \n %a"
               :empty-lines 1)

              ))
        (setq org-src-fontify-natively t)


        ;;bullets changed (not sure if I want it totally
        (use-package org-bullets
          :after org
          :hook (org-mode . org-bullets-mode)a
          :custom
          (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

        ; make the text middle (maybe later
        ;; (defun efs/org-mode-visual-fill ()
        ;;   (setq visual-fill-column-width 100
        ;;         visual-fill-column-center-text t)
        ;;   (visual-fill-column-mode 1))

        ;; (use-package visual-fill-column
        ;;   :hook (org-mode . efs/org-mode-visual-fill))


        (use-package alert)
        (use-package org-wild-notifier)

        (org-wild-notifier-mode t)
#+end_src
** Org-mode UI

*** Font
#+begin_src emacs-lisp

  ;;

  ;; (defun efs/org-font-setup ()
  ;;   ;; Replace list hyphen with dot
  ;;   (font-lock-add-keywords 'org-mode
  ;; 			  '(("^ *\\([-]\\) "
  ;; 			     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;;   ;; Set
    ;; faces for heading levels
    (dolist (face '((org-level-1 . 1.4)
                    (org-level-2 . 1.3)
                    (org-level-3 . 1.2)
                    (org-level-4 . 1.15)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    ;; (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    ;; (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    ;; (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    ;; (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    ;; (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    ;; (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    ;; (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src
*** Center Org Buffers
#+begin_src emacs-lisp
  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))
#+end_src
** Org-mode editing
#+begin_src emacs-lisp

    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("as" . "src asm"))
  (add-to-list 'org-structure-template-alist '("sq" . "src sql"))
#+end_src
** Babel Settings
*** Babel Languages
#+begin_src emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (python . t)))

(push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src
*** Babel Blockcode template

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src emacs-lisp
*** Bable Auto-tangle Configuration Files
#+begin_src emacs-lisp
;; Automatically tangle our Emacs.org config file when we save it
(defun efs/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.emacs.d/Emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src
** Org-Roam
#+begin_src emacs-lisp
(use-package org-roam
	     :ensure t	   
	     :custom
	     (org-roam-directory "~/Notes/RoamNotes")
	     :bind (("C-c n l" . org-roam-buffer-toggle)
		    ("C-c n f" . org-roam-node-find)
		    ("C-c n i" . org-roam-node-insert))
	     :config
	     (org-roam-setup)
	     
	     )
(setq org-roam-v2-ack t)
;; (add-to-list exec-path "/Users/hermanhe/opt/anaconda3/lib/python3.8/site-packages/graphviz/")
;;exec-path value before:("/usr/bin" "/bin" "/usr/sbin" "/sbin" "/Applications/Emacs.app/Contents/MacOS/bin-x86_64-10_14" "/Applications/Emacs.app/Contents/MacOS/libexec-x86_64-10_14" "/Applications/Emacs.app/Contents/MacOS/libexec" "/Applications/Emacs.app/Contents/MacOS/bin")
(setq exec-path (append exec-path '("/usr/local/Cellar/graphviz/2.49.1/bin")))
(setq org-roam-graph-executable "dot")
;; (setq org-roam-graph-executable "dot")
#+end_src
*** Org-Roam-UI
[[https://github.com/org-roam/org-roam-ui#straightuse-package][github:org-roam-ui]]
hit ~M-x org-roam-ui-mode RET~
It will start a web server on 127.0.0.1:35901 and connect to it via WebSocket(real-time update)
This is the way via straight
#+begin_src emacs-lisp
  ;; (use-package org-roam-ui
  ;;   :straight
  ;;     (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
  ;;     :after org-roam
  ;; ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;; ;;         a hookable mode anymore, you're advised to pick something yourself
  ;; ;;         if you don't care about startup time, use
  ;; ;;  :hook (after-init . org-roam-ui-mode)
  ;;     :config
  ;;     (setq org-roam-ui-sync-theme t
  ;;           org-roam-ui-follow t
  ;;           org-roam-ui-update-on-save t
  ;;           org-roam-ui-open-on-start t))
#+end_src

And this is the way mannually.
I mannualy installed ~websocket~ and ~simple-httpd~
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/site-lisp/org-roam-ui")
  (load-library "org-roam-ui")  
#+end_src
* EAF
** eaf
#+begin_src emacs-lisp
     ;;PyQt5 path

   (setq exec-path (append exec-path '("~/opt/anaconda3/lib/python3.8/site-packages/PyQt5")))

   (setq exec-path (append exec-path '("/Users/hermanhe/Library/Python/3.8/bin")))

         (add-to-list 'load-path "~/.emacs.d/site-lisp/emacs-application-framework/")
         (require 'eaf)
       (require 'eaf-browser)


  (add-to-list 'load-path "~/.emacs.d/site-lisp/emacs-application-framework/app/pdf-viewer/")

  (require 'eaf-pdf-viewer)

#+end_src
** eaf-browser
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/site-lisp/eaf-browser/eaf-browser/")
 (require 'eaf-browser)

#+end_src
* Development
** Some Editing-utils
*** Moving Lines
#+begin_src emacs-lisp

  					;move line up and down
(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

(global-set-key [(meta shift up)]  'move-line-up)
(global-set-key [(meta shift down)]  'move-line-down)

#+end_src
** Projectile
I deleted the "p" in "emacs-lisp" to diable it from tangling.
#+begin_src emacs-lisp
 (use-package projectile
   :diminish projectile-mode
   :config (projectile-mode)
   :custom ((projectile-completion-system 'ivy))
   :bind-keymap
   ("C-c p" . projectile-command-map)
   :init
   ;; NOTE: Set this to the folder where you keep your Git repos!
   (when (file-directory-p "~/playground")
     (setq projectile-project-search-path '("~/playground")))
   (setq projectile-switch-project-action 'projectile-dired))

 (use-package counsel-projectile
   :config (counsel-projectile-mode))
 +end_src
** Magit
 #+begin_src emacs-lisp
(require 'magit)
 (use-package magit)
         ;; :custom
         ;; (magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
     ;; )

       ;; (use-package evil-magit
       ;;   :after magit)

       ;; NOTE: Make sure to configure a GitHub token before using this package!
       ;; - https://magit.vc/manual/forge/Token-Creation.htmlToken-Creation
       ;; - https://magit.vc/manual/ghub/Getting-Started.htmlGetting-Started
       (use-package forge)
#+end_src
** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
* SQL
** path to mysql 
#+begin_src emacs-lisp
  (add-to-list 'exec-path "/usr/local/bin")










#+end_src
* Asm mode
I write assembly program in asm-mode
it indents weird. does not align correctly, but indent to the right.
#+begin_src emacs-lisp
(defun my-asm-mode-hook ()
  ;; you can use `comment-dwim' (M-;) for this kind of behaviour anyway
  (local-unset-key (vector asm-comment-char))
  ;; asm-mode sets it locally to nil, to "stay closer to the old TAB behaviour".
  (setq tab-always-indent (default-value 'tab-always-indent)))

(add-hook 'asm-mode-hook #'my-asm-mode-hook)
#+end_src
* Eshell
** Eshell PATH
The 
